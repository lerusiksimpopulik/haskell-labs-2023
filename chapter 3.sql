--3.1.
-- Get all the unique wares in the alphabetic order with the minimal and maximal prices for each.
SELECT PRODUCT.WARE,
MIN(PRODUCT.PRICE) AS MINPRICE, MAX(PRODUCT.PRICE) AS MAXPRICE
	FROM PRODUCT
GROUP BY PRODUCT.WARE;

--3.2.
-- Show top 3 wares with the most difference between minimal and maximal prices.
SELECT PRODUCT.WARE,
(MAX(PRODUCT.PRICE) - MIN(PRODUCT.PRICE)) AS MAXDIFF
	FROM PRODUCT
GROUP BY PRODUCT.WARE
ORDER BY MAXDIFF DESC
LIMIT 3;

--3.3.
-- Show top 3 companies producing the largest number of different products.
SELECT DISTINCT MANUFACTURER.COMPANY,
COUNT(DISTINCT PRODUCT.WARE) AS MAXWARE
	FROM MANUFACTURER
JOIN PRODUCT
	ON PRODUCT.BILL_ID = MANUFACTURER.BILL_ID
GROUP BY MANUFACTURER.COMPANY
ORDER BY MAXWARE DESC
LIMIT 3;

--3.4 (с
-- Show the price of the most expensive ware for each category. The result should be ordered by the category.
SELECT CATEGORY.CLASS, PRODUCT.WARE, MAX(PRODUCT.PRICE)
	FROM CATEGORY
JOIN PRODUCT
	ON CATEGORY.WARE = PRODUCT.WARE
GROUP BY CATEGORY.CLASS
ORDER BY CATEGORY.CLASS;

--3.5.
-- For each bill of materials show the company and lists of all the products and materials. The result must contain exactly one row per bill and sorted by company. Lists in the result must be represented as strings with values separated with comma.
SELECT MANUFACTURER.COMPANY,
GROUP_CONCAT(DISTINCT PRODUCT.WARE) AS PRODLIST,
GROUP_CONCAT(DISTINCT MATERIAL.WARE) AS MATLIST
	FROM MANUFACTURER
OUTER LEFT JOIN PRODUCT
	ON PRODUCT.BILL_ID = MANUFACTURER.BILL_ID
OUTER LEFT JOIN MATERIAL
	ON MATERIAL.BILL_ID = MANUFACTURER.BILL_ID
GROUP BY MANUFACTURER.BILL_ID
ORDER BY MANUFACTURER.COMPANY;

--3.6.
-- Show the companies in the alphabetical order that producing larger number of different wares than consuming.
SELECT MANUFACTURER.COMPANY,
COUNT(DISTINCT PRODUCT.WARE) AS PRODCNT,
COUNT(DISTINCT MATERIAL.WARE) AS MATCNT
	FROM MANUFACTURER
OUTER LEFT JOIN MATERIAL
	ON MATERIAL.BILL_ID = MANUFACTURER.BILL_ID
OUTER LEFT JOIN PRODUCT
	ON PRODUCT.BILL_ID = MANUFACTURER.BILL_ID
GROUP BY MANUFACTURER.COMPANY
	HAVING (PRODCNT > MATCNT);

--3.7
SELECT MANUFACTURER.COMPANY
	FROM MANUFACTURER
JOIN PRODUCT
	ON MANUFACTURER.BILL_ID = PRODUCT.BILL_ID
GROUP BY MANUFACTURER.COMPANY, PRODUCT.WARE
	HAVING COUNT(DISTINCT MANUFACTURER.BILL_ID) > 2;

--3.8
SELECT MANUFACTURER.COMPANY
	FROM MANUFACTURER
OUTER LEFT JOIN MATERIAL
	ON MANUFACTURER.BILL_ID = MATERIAL.BILL_ID
OUTER LEFT JOIN CATEGORY
	ON CATEGORY.WARE = MATERIAL.WARE
WHERE CATEGORY.CLASS IN ("Fuel", "Food", "Mineral")
GROUP BY MANUFACTURER.COMPANY					
	HAVING COUNT(DISTINCT CATEGORY.CLASS) = 3;	

--3.9.
-- For each company get the list of all the categories of materials used and the list of categories of products. The result must contain exactly one row per company and each list must contain only the unique entries.
SELECT MANUFACTURER.COMPANY,
GROUP_CONCAT(DISTINCT CAT1.CLASS) AS MTCATLIST,
GROUP_CONCAT(DISTINCT CAT2.CLASS) AS PRCATLIST
	FROM MANUFACTURER
OUTER LEFT JOIN PRODUCT
	ON PRODUCT.BILL_ID = MANUFACTURER.BILL_ID
OUTER LEFT JOIN CATEGORY AS CAT1
	ON CAT1.WARE = PRODUCT.WARE
OUTER LEFT JOIN MATERIAL
	ON MATERIAL.BILL_ID = MANUFACTURER.BILL_ID
OUTER LEFT JOIN CATEGORY AS CAT2
	ON CAT2.WARE = MATERIAL.WARE
GROUP BY MANUFACTURER.COMPANY;

--3.10.
-- For each company show all the production chains (separate row per company/chain). Here the production chain is defined as the intermediate product (ware) that both product for the one bill and material for other where both bills are owned by the same company. Each chain must be presented in the following form (MATERIAL1,MATERIAL2,...)-[BILL_ID1]->(INTERMEDIATE_PRODUCT)-[BILL_ID2]->(PRODUCT1, PRODUCT2,...). The result must be sorted by the company.
SELECT DISTINCT MAN1.COMPANY,
 "(" || IIF(GROUP_CONCAT(DISTINCT MAT1.WARE) IS NULL, "[[nothing]]", GROUP_CONCAT(DISTINCT MAT1.WARE)) ||	-- Inline IF -- if/then/else "в строчку"
	") -[№" || MAN1.BILL_ID || "]-> (" || PROD1.WARE ||
	") -[№" || MAN2.BILL_ID || "]-> (" || GROUP_CONCAT(DISTINCT PROD2.WARE) || ")" AS PRODCHAIN
	FROM MANUFACTURER AS MAN1
OUTER LEFT JOIN MATERIAL AS MAT1
	ON MAN1.BILL_ID = MAT1.BILL_ID
INNER JOIN PRODUCT AS PROD1
	ON MAN1.BILL_ID = PROD1.BILL_ID
INNER JOIN MANUFACTURER AS MAN2
	ON MAN1.COMPANY = MAN2.COMPANY
INNER JOIN PRODUCT AS PROD2
	ON MAN2.BILL_ID = PROD2.BILL_ID
INNER JOIN MATERIAL AS MAT2
	ON MAN2.BILL_ID = MAT2.BILL_ID
	AND PROD1.WARE = MAT2.WARE
GROUP BY MAN1.COMPANY, MAN1.BILL_ID, PROD1.WARE, MAN2.BILL_ID
ORDER BY MAN1.COMPANY ASC;
